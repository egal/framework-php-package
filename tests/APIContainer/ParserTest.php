<?php

namespace EgalFramework\APIContainer\Tests;

use EgalFramework\APIContainer\Parser\API;
use EgalFramework\APIContainer\Parser\ClassRoleTag;
use EgalFramework\APIContainer\Parser\MethodRoleTag;
use PHPUnit\Framework\TestCase;
use ReflectionException;

class ParserTest extends TestCase
{

    private API $api;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->api = new API;
    }

    /**
     * @param string[] $expectedMethods
     * @throws ReflectionException
     * @dataProvider dataProvider
     */
    public function testAPI($expectedMethods)
    {
        $model = $this->api->extract('EgalFramework\\APIContainer\\Tests\\Samples\\TestClass', false);
        self::assertEquals(
            [
                'name' => 'TestClass',
                'summary' => 'Test class title',
                'description' => 'Test description',
            ],
            json_decode($model->toString(), TRUE)
        );
        foreach ($model->getMethods() as $method) {
            $this->assertEquals($expectedMethods[$method->name], json_decode($method->toString(), TRUE));
        }
    }

    public function dataProvider()
    {
        return [
            [
                [
                    'protectedAbstract2' => [
                        'name' => 'protectedAbstract2',
                        'summary' => '',
                        'description' => '',
                        'roles' => ['test'],
                        'arguments' => [
                            'str' => [
                                'name' => 'str',
                                'type' => 'string',
                                'description' => '',
                                'isRequired' => true,
                            ],
                        ],
                        'return' => '',
                        'fromClass' => '',
                    ],
                    'actionTrait' => [
                        'name' => 'actionTrait',
                        'summary' => 'A trait action',
                        'description' => 'With description',
                        'roles' => ['admin'],
                        'arguments' => [
                            'qqq' => [
                                'name' => 'qqq',
                                'type' => 'string',
                                'description' => '',
                                'isRequired' => true,
                            ]
                        ],
                        'return' => '',
                        // it is possible to get if this is a trait method, but it is too complicate
                        'fromClass' => 'EgalFramework\APIContainer\Tests\Samples\TestClass',
                    ],
                    'actionDo' => [
                        'name' => 'actionDo',
                        'summary' => 'Method summary',
                        'description' => "Method description\ncan be very long",
                        'roles' => [],
                        'arguments' => [
                            'name' => [
                                'name' => 'name',
                                'type' => 'string',
                                'description' => 'Attribute description',
                                'isRequired' => false,
                            ],
                            'fake' => [
                                'name' => 'fake',
                                'type' => 'string',
                                'description' => '',
                                'isRequired' => true,
                            ],
                        ],
                        'return' => 'string',
                        'fromClass' => 'EgalFramework\APIContainer\Tests\Samples\TestClass',
                    ],
                    'actionAbstractOverride' => [
                        'name' => 'actionAbstractOverride',
                        'summary' => 'Overridden method',
                        'description' => 'Overridden method description',
                        'roles' => ['nobody'],
                        'arguments' => [],
                        'return' => '',
                        'fromClass' => 'EgalFramework\APIContainer\Tests\Samples\TestClass',
                    ],
                    'actionAbstract' => [
                        'name' => 'actionAbstract',
                        'summary' => 'Test abstract action',
                        'description' => '',
                        'roles' => ['www'],
                        'arguments' => [],
                        'return' => '',
                        'fromClass' => 'EgalFramework\APIContainer\Tests\Samples\TestAbstractClass',
                    ],
                ]
            ]
        ];
    }

    public function testRoleTag()
    {
        $roleTag = new ClassRoleTag('testMethod', 'admin,www');
        $this->assertEquals('testMethod admin,www', (string)$roleTag);
    }

    public function testMethodRoleTag()
    {
        $roleTag = new MethodRoleTag('www,none');
        $this->assertEquals('www,none', (string)$roleTag);
    }

    /**
     * @throws ReflectionException
     */
    public function testAPIFullAccess()
    {
        $model = $this->api->extract('EgalFramework\\APIContainer\\Tests\\Samples\\TestClass', true);
        $this->assertNotNull($model->getMethod('actionDo'));
    }

}
